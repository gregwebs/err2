# As a unwarnted side effect this appears to remove comments at the top of the function body
[add-handle-fn]
match='''
func :[fn.](:[args]) (:[returns], error) {
	:[body]
}'''
rule='''
where match :[body] {
| ":[~try\.Handle]" -> false
| ":[~try\.Check]" -> true
| ":[~try\.Try]" -> true
| ":[_]" -> false
}'''
rewrite='''
func :[fn.](:[args]) (:[returns], error) {
	defer try.Handle(&err, nil)
	:[body]
}'''

[remove-empty-handle-method]
match='''
func (:[receiver]) :[fn.](:[args]) (:[returns], error) {
	:[body]
}'''
rule='''
where match :[body] {
| ":[~try\.Handle]" -> false
| ":[~try\.Check]" -> true
| ":[~try\.Try]" -> true
| ":[_]" -> false
}
'''
rewrite='''
func (:[receiver]) :[fn.](:[args]) (:[returns], error) {
	defer try.Handle(&err, nil)
	:[body]
}'''

[remove-empty-handle-lambda]
match='''
func(:[args]) (:[returns], error) {
	:[body]
}'''
rule='''where
match :[body] {
| ":[~try\.Handle]" -> false
| ":[~try\.Check]" -> true
| ":[~try\.Try]" -> true
| ":[_]" -> false
}'''
rewrite='''
func (:[args]) (:[returns], error) {
	defer try.Handle(&err, nil)
	:[body]
}'''


[handle-add-named-variables-method]
match='''
func (:[receiver]) :[fn.](:[args]) (:[returns], error) {
	defer try.Handle:[handle_args]
	:[body]
}'''
rule='''
where rewrite :[returns] { ":[r~[^,]+]" -> "_ :[r]" }
'''
rewrite='''
func (:[receiver]) :[fn.](:[args]) (:[returns], err error) {
	defer try.Handle:[handle_args]
	:[body]
}'''
[handle-add-named-variables-fn]
match='''
func :[fn.](:[args]) (:[returns], error) {
	defer try.Handle:[handle_args]
	:[body]
}'''
rule='''
where rewrite :[returns] { ":[r~[^,]+]" -> "_ :[r]" }
'''
rewrite='''
func :[fn.](:[args]) (:[returns], err error) {
	defer try.Handle:[handle_args]
	:[body]
}'''

[handle-add-named-variables-lambda]
match='''
func(:[args]) (:[returns], error) {
	defer try.Handle:[handle_args]
	:[body]
}'''
rule='''
where rewrite :[returns] { ":[r~[^,]+]" -> "_ :[r]" }
'''
rewrite='''
func :[fn.](:[args]) (:[returns], err error) {
	defer try.Handle:[handle_args]
	:[body]
}'''


[handle-fix-no-new-variables-method]
match='''
func (:[receiver]) :[fn.](:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var~\S+] := :[rest]
	:[body_after]
}'''
rule='''
where match :[err_var] {
| ":[~err]" -> true
| ":[_]" -> false
}
'''
rewrite='''
func (:[receiver]) :[fn.](:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var] = :[rest]
	:[body_after]
}'''

[handle-fix-no-new-variables-fn]
match='''
func :[fn.](:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var~\S+] := :[rest]
	:[body_after]
}'''
rule='''
where match :[err_var] {
| ":[~err]" -> true
| ":[_]" -> false
}
'''
rewrite='''
func :[fn.](:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var] = :[rest]
	:[body_after]
}'''
[handle-fix-no-new-variables-lambda]
match='''
func(:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var~\S+] := :[rest]
	:[body_after]
}'''
rule='''
where match :[err_var] {
| ":[~err]" -> true
| ":[_]" -> false
}
'''
rewrite='''
func :[fn.](:[args]) (:[returns], err error) {
	:[body_before]
	:[err_var] = :[rest]
	:[body_after]
}'''
